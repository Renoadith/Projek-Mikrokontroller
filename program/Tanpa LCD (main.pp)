#include <avr/io.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include "BERISIK.h"  // Asumsikan "BERISIK.h" berisi data lagu dalam PROGMEM
// #include "suara.h" // Komentari jika tidak digunakan

volatile bool play = false;  // Variabel untuk menandakan apakah lagu sedang dimainkan
volatile uint8_t track = 0;  // Variabel untuk memilih lagu
volatile uint16_t count = 0; // Penghitung posisi lagu

// ISR untuk Timer0 Compare Match A
ISR(TIMER0_COMPA_vect) {
  if (play) {
    if (track == 0) {
      OCR1A = ~pgm_read_byte(&berisik[count]); // Mainkan track 0
      count++;
      if (count >= sizeof(berisik)) {
        play = false;
        OCR1A = 0; // Hentikan PWM
      }
    }
    // else if (track == 1) {
    //   OCR1A = ~pgm_read_byte(&akhir[count]); // Mainkan track 1
    //   count++;
    //   if (count >= sizeof(akhir)) {
    //     play = false;
    //     OCR1A = 0; // Hentikan PWM
    //   }
    // }
  }
}

// Inisialisasi PWM pada Timer1
void initPWM(void) {
  DDRB |= _BV(DDB1); // Set PB1 (OC1A) sebagai output untuk PWM
  TCCR1A = _BV(WGM10) | _BV(COM1A1); // Fast PWM, 8-bit
  TCCR1B = _BV(WGM12) | _BV(CS10);   // Fast PWM, no prescaler
  OCR1A = 200;
}

// Inisialisasi Timer0
void TimerInit(void) {
  TCCR0A = _BV(WGM01); // CTC mode
  TCCR0B = _BV(CS01);  // Prescaler 8
  OCR0A = 250;
  TIMSK0 |= _BV(OCIE0A); // Enable compare match interrupt
}

int main(void) {
  DDRD |= _BV(DDD6); // Set PD6 (OC0A/OC1A) sebagai output untuk PWM
  PORTD |= _BV(PORTD2) | _BV(PORTD3); // Enable pull-up resistors on PD2 and PD3

  initPWM();   // Inisialisasi PWM
  TimerInit(); // Inisialisasi Timer0
  sei();       // Aktifkan global interrupt

  while (1) {
    if ((PIND & _BV(PIND2)) && !play) { // PD2 sebagai selector track 0
      play = true;
      track = 0;
      count = 0;
    }
    // else if (!(PIND & _BV(PIND3))) { // PD3 sebagai selector track 1
    //   play = true;
    //   track = 1;
    //   count = 0;
    // }
  }
}
